source("http://bioconductor.org/biocLite.R")
biocLite("gdsfmt")
# Load the R packages: gdsfmt and SNPRelate
library(gdsfmt)
library(SNPRelate)
biocLite("SNPRelate")
# Load the R packages: gdsfmt and SNPRelate
library(gdsfmt)
library(SNPRelate)
library(SNPRelate)
library(gdsfmt)
setwd("~/Documents/training/BFB_Feb17/devega_SNPrelate/new_project_snprelate")
?`SNPRelate-package`
?snpgdsSummary
library(gdsfmt)
library(SNPRelate)
?snpgdsSummary
celar
clear
example <- system.file("extdata", "sequence.vcf", package="SNPRelate")
library(SNPRelate)
example <- system.file("extdata", "sequence.vcf", package="SNPRelate")
?snpgdsVCF2GDS
snpgdsVCF2GDS(example, "test.gds", method="biallelic.only")
mydata <- snpgdsOpen(filename = "test.gds")
mydata
snpset <- snpgdsLDpruning(mydata, ld.threshold=0.2)
snpset <- snpgdsLDpruning(mydata, ld.threshold=0.1)
example
genofile <- snpgdsOpen(snpgdsExampleFileName())
#Lest try something a more complex dataset complex:
mynewdata <- snpgdsOpen(snpgdsExampleFileName())
#LD-based SNP pruning: filter SNPs in close LD to avoid the strong influence of SNP clusters
?snpgdsLDpruning
snpset <- snpgdsLDpruning(mynewdata, ld.threshold=0.3)
mynewdata <- snpgdsOpen(snpgdsExampleFileName())
genofile <- snpgdsOpen(snpgdsExampleFileName())
mynewdata <- snpgdsOpen(snpgdsExampleFileName())
#LD-based SNP pruning: filter SNPs in close LD to avoid the strong influence of SNP clusters
?snpgdsLDpruning
snpset <- snpgdsLDpruning(mynewdata, ld.threshold=0.3)
snpset <- snpgdsLDpruning(genofile, ld.threshold=0.3)
snpset.onlyids<- unlist(snpset)
snpgdsPCA(genofile, snp.id=snpset.onlyids)
mypca <- snpgdsPCA(genofile, snp.id=snpset.onlyids)
plot(mypca)
install.packages("pca3d")
library("pca3d", lib.loc="/usr/local/lib/R/3.3/site-library")
pca3d(mypca)
pca3d(mypca, components = 1:3)
pca3d(mypca$eigenvect)
view(mypca)
view(mypca$eigenvect)
View(mypca$eigenvect)
mypca
mypca$eigenval
mypca$sample.id
mypca$snp.id
makeMoviePCA(pca3d(mypca$eigenvect))
pca3d(mypca$eigenvect)
makeMoviePCA( pca3d(mypca$eigenvect) )
pca3d(mypca$eigenvect)
makeMoviePCA()
pca3d(mypca$eigenvect); makeMoviePCA()
pca3d(mypca$eigenvect); makeMoviePCA()
pca3d(mypca$eigenvect)
pca3d()
pca3d(mypca$eigenvect)
pca3d(mypca$eigenvect); makeMoviePCA()
pca3d(mypca$eigenvect)
pca3d(mypca$eigenvect); makeMoviePCA()
